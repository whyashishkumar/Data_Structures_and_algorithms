void inorder(TreeNode<int>* root,vector<int> &in){
    if(root==NULL){
        return;
    }
    inorder(root->left,in);
    in.push_back(root->data);
    inorder(root->right,in);
    return;
}
vector<int> merge(vector<int> &in1,vector<int> &in2){
    vector<int> ans;
    int i=0;
    int j=0;
    
    while(i<in1.size() && j<in2.size()){
        if(in1[i]>in2[j]){
            ans.push_back(in2[j]);
            j++;
        }
        else if(in1[i] < in2[j]){
            ans.push_back(in1[i]);
            i++;
        }
        else{
            ans.push_back(in1[i]);
            i++;
            ans.push_back(in2[j]);
            j++;
        }
    }
    while(i<in1.size()){
       ans.push_back(in1[i]);
       i++; 
    }
    while(j<in2.size()){
       ans.push_back(in2[j]);
       j++; 
    }
    return ans;
}
TreeNode<int>* build(vector<int> &in,int s,int e){
    if(s>e){
        return NULL;
    }
    int mid=(s+e)/2;
    TreeNode<int>* root=new TreeNode<int>(in[mid]);
    root->left=build(in,s,mid-1);
    root->right=build(in,mid+1,e);
    return root;
}
TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
    if(root1==NULL && root2==NULL){
        return NULL;
    }
    vector<int> in1;
    vector<int> in2;
    inorder(root1,in1);
    inorder(root2,in2);
    vector<int> in=merge(in1,in2);
    TreeNode<int>* newbst=build(in,0,in.size()-1);
    return newbst;
}