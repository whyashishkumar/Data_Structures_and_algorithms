class Solution{
    public:
    bool issafe(int x,int y,vector<vector<int>> &visited,vector<vector<int>> &m,int n){
        if((x<n && x>=0) && (y<n && y>=0) && visited[x][y]==0 && m[x][y]==1){
            return true;
        }
        return false;
    }
    void solve(vector<vector<int>> &m, int n,int x,int y,vector<vector<int>> &visited,string path,vector<string> &ans){
        if(x==n-1 && y==n-1){
            ans.push_back(path);
            return;
        }
        visited[x][y]=1;
        //down
        if(issafe(x,y,visited,m,n)){
            path.push_back('D');
            solve(m,n,x+1,y,visited,path,ans);
            path.pop_back();
        }
        //right
        if(issafe(x,y,visited,m,n)){
            path.push_back('R');
            solve(m,n,x,y+1,visited,path,ans);
            path.pop_back();
        }
        //up
        if(issafe(x,y,visited,m,n)){
            path.push_back('U');
            solve(m,n,x-1,y,visited,path,ans);
            path.pop_back();
        }
        //left
        if(issafe(x,y,visited,m,n)){
            path.push_back('L');
            solve(m,n,x,y-1,visited,path,ans);
            path.pop_back();
        }
        visited[x][y]=0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        string path="";
        vector<vector<int>> visited=m;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                visited[i][j]==0;
            }
        }
        vector<string> ans;
        int sx=0;
        int sy=0;
        if(m[sx][sy]==0){
            return ans;
        }
        solve(m,n,sx,sy,visited,path,ans);
        sort(ans.begin(),ans.end());
        return ans;
    }
};