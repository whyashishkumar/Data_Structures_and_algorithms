void add(vector<vector<int>> &ans,vector<vector<int>> &board,int n){
    vector<int> temp;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            temp.push_back(board[i][j]);
        }
    }
    ans.push_back(temp);
    return;
}
bool issafe(int n,vector<vector<int>> &ans,vector<vector<int>> &board,int row,int col){
    int y=col;
    while(y>=0){
        if(board[row][y]==1){
            return false;
        }
        y--;
    }
    int x=row;
    y=col;
    while(y>=0 && x>=0){
        if(board[x][y]==1){
            return false;
        }
        x--;
        y--;
    }
    x=row;
    y=col;
    while(y>=0 && x<n){
        if(board[x][y]==1){
            return false;
        }
        x++;
        y--;
    }
    return true;
}
void solve(int col,vector<vector<int>> &ans,int n,vector<vector<int>> &board){
    if(col==n){
        add(ans,board,n);
        return;
    }
    for(int row=0;row<n;row++){
        if(issafe(n,ans,board,row,col)){
            board[row][col]=1;
            solve(col+1,ans,n,board);
            board[row][col]=0;
        }
    }
    return;
}
vector<vector<int>> solveNQueens(int n) {
    // Write your code here.
    vector<vector<int>> ans;
    vector<vector<int>> board(n,vector<int>(n,0));
    solve(0,ans,n,board);
    return ans;
}