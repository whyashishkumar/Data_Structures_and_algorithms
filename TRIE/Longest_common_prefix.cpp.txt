class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int n=strs.size();
        string ans="";
        for(int i=0;i<strs[0].length();i++){
            bool match=true;
            char ch=strs[0][i];
            for(int j=1;j<n;j++){
                if(strs[j].length()<i || ch!=strs[j][i]){
                    match=false;
                    break;
                }
            }
            if(match==false){
                break;
            }
            else{
                ans.push_back(ch);
            }
        }
        return ans;
    }
};

// using trie


class node{
  public:
    char data;
    node* children[26];
    int count;
    bool term;
    node(char word){
        data=word;
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        count=0;
        term=false;
    }
};
class trie{
    public:
    node* root;
    trie(){
        root=new node('\0');
    }
    void insertatutil(node* root,string word){
        if(word.length()==0){
            root->term=true;
            return;
        }
        int index=word[0]-'a';
        node* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            root->count++;
            child=new node(word[0]);
            root->children[index]=child;
        }
        insertatutil(child,word.substr(1));
    }
    void insert(string word){
        insertatutil(root,word);
    }
    string longpre(string word){
        string ans="";
        for(int i=0;i<word.length();i++){
            char ch=word[i];
            if(root->count==1){
                ans.push_back(ch);
                int index=ch-'a';
                root=root->children[index];
            }
            else{
                break;
            }
            if(root->term==true){
                break;
            }
        }
        return ans;
    }
};
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        trie* t=new trie();
        for(int i=0;i<strs.size();i++){
            if(strs[i].size()==0){
                return "";
            }
            t->insert(strs[i]);
        }
        string ans=t->longpre(strs[0]);
        return ans;
    }
};