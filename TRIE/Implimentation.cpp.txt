#include<bits/stdc++.h>
using namespace std;

class node{
    public:
    char ch;
    node* children[26];
    bool term;
    node(char word){
        ch=word;
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        term=false;
    }
};


class trie{
    public:
    node* root;
    trie(){
        root=new node('\0');
    }

    //insertion function
    void insert(node* root,string word){
        if(word.length()==0){
            root->term=true;
            return;
        }
        int index=word[0]-'A';
        node* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            child=new node(word[0]);
            root->children[index]=child;
        }
        insert(child,word.substr(1));
    }
    void insertion(string word){
        insert(root,word);
    }

    //search function
    bool searchutil(node* root,string word){
        if(word.length()==0){
            return root->term;
        }
        int index=word[0]-'A';
        node* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            return false;
        }
        return searchutil(child,word.substr(1));
    }
    bool search(string word){
        return searchutil(root,word);
    }
};


int main(){
    trie *t=new trie();
    t->insertion("ASHISH");
    cout<<"Successful insertion\n";
    cout<<t->search("ASHISH")<<endl;
    cout<<t->search("ASH")<<endl;
    cout<<"Successful search\n";
    return 0;
}