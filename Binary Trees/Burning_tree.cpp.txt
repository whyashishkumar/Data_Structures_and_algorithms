class Solution {
  public:
    Node* mapping(Node* root, int target, map<Node*, Node*> &parentToChild){
        if(root==NULL){
            return NULL;
        }
        queue<Node*> q;
        q.push(root);
        parentToChild[root]=NULL;
        Node* res;
        while(!q.empty()){
            Node* temp=q.front();
            q.pop();
            if(temp->data==target){
                res=temp;
            }
            if(temp->left){
               parentToChild[temp->left]=temp;
               q.push(temp->left);
            }
            if(temp->right){
                parentToChild[temp->right]=temp;
                q.push(temp->right);
            }
        }
        return res;
    }
    int burn(Node* root,map<Node*,Node*> &parentToChild){
        
        queue<Node*> q;
        map<Node*,bool> visited;
        int ans=0;
        
        q.push(root);
        visited[root]=true;
        
        while(!q.empty()){
            bool flag=0;
            int size=q.size();
            
            for(int i=0;i<size;i++){
                
                Node* temp=q.front();
                q.pop();
                
                if(temp->left && !visited[temp->left]){
                    flag=1;
                    q.push(temp->left);
                    visited[temp->left]=true;
                }
                
                if(temp->right && !visited[temp->right]){
                    flag=1; 
                    q.push(temp->right);
                    visited[temp->right]=true;
                }
                
                if(parentToChild[temp] && !visited[parentToChild[temp]]){
                    flag=1;
                    q.push(parentToChild[temp]);
                    visited[parentToChild[temp]]=true;
                }
                
            }
            if(flag==1){
                ans++;
            }
        }
        return ans;
    }
    int minTime(Node* root, int target){
        map<Node*,Node*> parentToChild;
        Node* targetnode=mapping(root,target,parentToChild);
        int ans=burn(targetnode,parentToChild);
        return ans;
    }
};