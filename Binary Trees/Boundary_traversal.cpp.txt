class Solution {
public:
    void leftTravesral(Node* root,vector<int> &ans){
        if((root==NULL) || (root->left==NULL && root->right==NULL)){
            return;
        }
        ans.push_back(root->data);
        if(root->left){
            leftTravesral(root->left,ans);
        }
        else{
            leftTravesral(root->right,ans);
        }
        return;
    }
    void leafTraversal(Node* root,vector<int> &ans){
        if(root==NULL){
            return;
        }
        if(root->left==NULL && root->right==NULL){
            ans.push_back(root->data);
            return;
        }
        if(root->left){
            leafTraversal(root->left,ans);
        }
        if(root->right){
            leafTraversal(root->right,ans);  
        }
        return;
    }
    void rightTraversal(Node* root,vector<int> &ans){
        if( (root==NULL) || (root->left==NULL && root->right==NULL)){
            return;
        }
        
        if(root->right){
            rightTraversal(root->right,ans);
        }
        else{
            rightTraversal(root->left,ans);
        }
        ans.push_back(root->data);
        return;
    }
    vector <int> boundary(Node *root){
        vector<int> ans;
        if(root==NULL){
            return ans;
        }
        ans.push_back(root->data);
        
        leftTravesral(root->left,ans);
        leafTraversal(root->left,ans);
        leafTraversal(root->right,ans);
        rightTraversal(root->right,ans);
        
        return ans;
    }
};